import numpy as np
import os
import time
from collections import OrderedDict
import pickle as pkl

def get_rmsd_stats(rmsd, num_conformers, which="min"):
    """Get rmsd stats for each of the num_conformers number"""
    rmsd_stats = {}
    for n in num_conformers:
        if which == "min":
            rmsd_stats[n] = np.min(rmsd[:n])
        elif which == "median":
            rmsd_stats[n] = np.median(rmsd[:n])
        elif which == "mean":
            rmsd_stats[n] = np.mean(rmsd[:n])
        elif which == "max":
            rmsd_stats[n] = np.max(rmsd[:n])
    return rmsd_stats

def get_mol_number_baseline(f_name):
    return int(f_name.split('.')[0].split('_')[-1])

def read_mols_baseline(folder, num_conformers):
    """Function that reads results per molecule generated by baseline methods"""
    f_names = os.listdir(folder)
    mols = OrderedDict()
    
    t1 = time.time()
    for f_i, f_name in enumerate(f_names):
        if f_i % 500 == 0:
            print ('done {} out of {}'.format(f_i, len(f_names)))
        mol_num = get_mol_number_baseline(f_name)
        mol = pkl.load(open(os.path.join(folder, f_name), 'rb'))
        if 'mmff' not in mol.keys() or 'uff' not in mol.keys():
            continue
        if len(mol['mmff']) == 0 or len(mol['uff']) == 0:
            continue
        # mmff is has 2 columns (1st is number of heavy atoms, 2nd is mmff score)
        mol['mmff'] = mol['mmff'][:,1]
        mol['uff'] = mol['uff'][:,1]
        mol['min_mmff'] = get_rmsd_stats(mol['mmff'], num_conformers, which="min")
        mol['min_uff'] = get_rmsd_stats(mol['uff'], num_conformers, which="min")
        mol['median_mmff'] = get_rmsd_stats(mol['mmff'], num_conformers, which="median")
        mol['median_uff'] = get_rmsd_stats(mol['uff'], num_conformers, which="median")
        
        mols[mol_num] = mol
    t2 = time.time()
    print ("time took {}".format(t2-t1))
    return mols

def read_mols_baseline2(folder, num_conformers):
    """Function that reads results per molecule generated by baseline methods"""
    f_names = os.listdir(folder)
    mols = OrderedDict()
    
    t1 = time.time()
    for f_i, f_name in enumerate(f_names):
        if f_i % 500 == 0:
            print ('done {} out of {}'.format(f_i, len(f_names)))
        mol_num = get_mol_number_baseline(f_name)
        mol = pkl.load(open(os.path.join(folder, f_name), 'rb'))
        if 'mmff' not in mol.keys() or 'uff' not in mol.keys():
            continue
        if len(mol['mmff']) == 0 or len(mol['uff']) == 0:
            continue
        # mmff is has 2 columns (1st is number of heavy atoms, 2nd is mmff score)
        mol['mmff'] = np.array(mol['mmff'])
        mol['uff'] = np.array(mol['uff'])
        mol['min_mmff'] = get_rmsd_stats(mol['mmff'], num_conformers, which="min")
        mol['min_uff'] = get_rmsd_stats(mol['uff'], num_conformers, which="min")
        
        mol['median_mmff'] = get_rmsd_stats(mol['mmff'], num_conformers, which="median")
        mol['median_uff'] = get_rmsd_stats(mol['uff'], num_conformers, which="median")
        
        mols[mol_num] = mol
    t2 = time.time()
    print ("time took {}".format(t2-t1))
    return mols

def get_mol_number_neuralnet(f_name):
    return int(f_name.split('.')[0].split('_')[1])

def read_mols_neuralnet(folder, num_conformers):
    """Function that reads results per molecule generated by baseline methods"""
    f_names = os.listdir(folder)
    mols = OrderedDict()
    
    t1 = time.time()
    for f_i, f_name in enumerate(f_names):
        if f_i % 500 == 0:
            print ('done {} out of {}'.format(f_i, len(f_names)))
        mol_num = get_mol_number_neuralnet(f_name)
        mol = pkl.load(open(os.path.join(folder, f_name), 'rb'))
        if 'rmsd' not in mol.keys():
            continue
        mol['rmsd'] = mol['rmsd']
        mol['min_rmsd'] = get_rmsd_stats(mol['rmsd'], num_conformers, which="min")    
        mol['median_rmsd'] = get_rmsd_stats(mol['rmsd'], num_conformers, which="median")    
        mols[mol_num] = mol
    t2 = time.time()
    print ("time took {}".format(t2-t1))
    return mols

if __name__ == "__main__":
    dataset = "QM9"
    num_conformers = [1, 10, 100]
    ff_mols = read_mols_baseline('/home/mansimov/projects/dl4chem-geometry/results/ff/{}/_test_/rep_100_iter_200/mols'.format(dataset), num_conformers)
    nn_mols = OrderedDict()
    nn_hyperparams = ["prior_T=0.5", "prior_T=1", "prior_T=2", "prior_T=4"]
    for nn_i in nn_hyperparams:
        nn_mols[nn_i] = read_mols_neuralnet('/home/mansimov/projects/dl4chem-geometry/results/nn/{}/{}/_test_'.format(nn_i, dataset), num_conformers)